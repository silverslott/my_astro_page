import{constants as m}from"fs";import{access as w,mkdir as P,stat as c,writeFile as b}from"fs/promises";import{dirname as p}from"path";var _=async(l,{fulfilled:e,failed:g,accomplished:a,changed:f,passed:u,read:s,wrote:r})=>{let o=l;for(const[i,h]of o.results)try{if(o.ongoing.inputPath=h,o.ongoing.outputPath=i,o.ongoing.fileSizeBefore=(await c(o.ongoing.inputPath)).size,s&&r){o.ongoing.buffer=await s(o.ongoing);const n=await r(o.ongoing);if(!n)continue;if(o.ongoing.buffer=n,u&&await u(o.ongoing)){try{await w(p(o.ongoing.outputPath),m.W_OK)}catch{await P(p(o.ongoing.outputPath),{recursive:!0})}if(await b(o.ongoing.outputPath,o.ongoing.buffer,"utf-8"),o.ongoing.fileSizeAfter=(await c(o.ongoing.outputPath)).size,o.debug>0&&(o.files++,f&&(o=await f(o))),o.debug>1&&typeof a=="function"){const t=await a(o.ongoing);t&&t.length>0&&console.log(t)}}}}catch{if(o.results.delete(i),typeof g=="function"){const t=await g(o.ongoing);t&&t.length>0&&console.log(t)}}if(o.debug>0&&o.results.size>0&&typeof e=="function"){const i=await e(o);i&&i.length>0&&console.log(i)}return o};export{_ as default};
